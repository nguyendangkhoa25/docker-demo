node {
   // job
  try {
       def commit_id
       def myGradleContainer = docker.image('gradle:jdk8-alpine')
       myGradleContainer.pull()
       stage('Preparation') {
         checkout scm
         sh "git rev-parse --short HEAD > .git/commit-id"
         commit_id = readFile('.git/commit-id').trim()
       }

      stage('Run Gradle Test') {
         myGradleContainer.inside("-v ${env.HOME}/.gradle:/home/gradle/.gradle") {
           sh 'cd complete && ./gradlew test'
         }
      }
      stage('Execute Gradle') {
         myGradleContainer.inside("-v ${env.HOME}/.gradle:/home/gradle/.gradle") {
           sh 'cd complete && ./gradlew run'
         }
      }


       stage('test') {
         def myTestContainer = docker.image('node:4.6')
         myTestContainer.pull()
         myTestContainer.inside {
           sh 'npm install --only=dev'
           sh 'npm test'
         }
       }
       stage('test with a DB') {
         def mysql = docker.image('mysql').run("-e MYSQL_ALLOW_EMPTY_PASSWORD=yes") 
         def myTestContainer = docker.image('node:4.6')
         myTestContainer.pull()
         myTestContainer.inside("--link ${mysql.id}:mysql") { // using linking, mysql will be available at host: mysql, port: 3306
              sh 'npm install --only=dev' 
              sh 'npm test'                     
         }                                   
         mysql.stop()
       }
      
       stage('docker build/push') {            
         docker.withRegistry('https://index.docker.io/v1/', 'nguyendangkhoa25-dockerhub') {
           def app = docker.build("nguyendangkhoa25/ci-cd-demo:${commit_id}", '.').push()
         }                                     
       }
     } catch(e) {
      // mark build as failed
      currentBuild.result = "FAILURE";

      // send slack notification
      slackSend (color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")

      // throw the error
      throw e;
  }
}                                          
